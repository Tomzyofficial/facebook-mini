
-- Create users table
CREATE TABLE IF NOT EXISTS public.users (
  id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fname character varying NOT NULL,
  lname character varying not null, 
  dob date not null, 
  gender character VARYING not null, 
  email character varying not null, 
  pword character varying not null, 
  current_profile_image character varying 
  );

  -- ALTER TABLE public.users MODIFY COLUMN current_profile_image character varying

-- Create user_profile_photos table
CREATE TABLE users_profile_photos (
  id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_acct INTEGER NOT NULL,
  profile_pic TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_user_acct FOREIGN KEY (user_acct) REFERENCES public.users(id)
);

-- Create posts table
CREATE TABLE IF NOT EXISTS public.posts(
  id int not null GENERATED by DEFAULT as IDENTITY,
  post_text character varying not null,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  user_acct int not null,
  CONSTRAINT fk_owner FOREIGN KEY (user_acct) REFERENCES public.users(id)
);

-- Create friend request table
CREATE TABLE IF NOT EXISTS public.friend_requests(
  id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  from_user_id INT NOT NULL,
  to_user_id INT NOT NULL,
  friend_request_status TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_from_user FOREIGN KEY (from_user_id) REFERENCES public.users(id),
  CONSTRAINT fk_to_user FOREIGN KEY (to_user_id) REFERENCES public.users(id),
  CONSTRAINT unique_friend_request UNIQUE(from_user_id, to_user_id)
);